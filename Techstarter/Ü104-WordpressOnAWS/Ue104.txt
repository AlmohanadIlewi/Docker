



Musterlösung 104 Wordpress in Docker


Aufgabe: WordPress und MySQL in Docker auf AWS EC2 bereitstellen

Ziel: In dieser Aufgabe sollst du WordPress und eine MySQL-Datenbank in separaten Docker-Containern auf einer AWS EC2-Instanz in den AWS-Sandboxen bereitstellen. 
Der WordPress-Blog sollte über das Internet erreichbar sein. Verwende dafür Docker-Compose.


EC2-Instanz erstellen:
Starte eine EC2-Instanz in AWS.
Melde dich bei deinem AWS-Konto an und navigiere zum EC2-Dashboard.
Klicke auf "Instanz starten".
Wähle "Ubuntu Server" als Betriebssystem.
Wähle eine Instanzgröße (z. B. t2.micro für kostenlose Kontingente).
Konfiguriere die Sicherheitsgruppe, um die Ports 22 (SSH), 80 (HTTP) und 3306 (MySQL) zu öffnen.
Docker auf EC2 installieren:
Stelle sicher, dass Docker auf der EC2-Instanz installiert ist.
Verbinde dich mit deiner EC2-Instanz
Installiere Docker

sudo apt update
sudo apt install docker.io
sudo systemctl enable docker
sudo usermod -aG docker $USER 
Docker Compose installieren
sudo apt install docker-compose


MySQL-Container erstellen:
Verwende Docker, um einen MySQL-Container zu erstellen.
Lege die Datenbank und Benutzer fest.

WordPress-Container erstellen:
Erstelle einen WordPress-Container und verbinde ihn mit dem MySQL-Container.
MySQL- und WordPress-Container mit Docker Compose erstellen:
Erstelle eine docker-compose.yml Datei:

nano docker-compose.yml
Füge diesen Inhalt hinzu und speicher es ab

version: '3'

services:
   db:
     image: mysql:5.7
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     environment:
       MYSQL_ROOT_PASSWORD: wp_pass
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wp_user
       MYSQL_PASSWORD: wp_user_pass

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "80:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wp_user
       WORDPRESS_DB_PASSWORD: wp_user_pass
       WORDPRESS_DB_NAME: wordpress

volumes:
    db_data: {}



Docker-Compose starten

docker-compose up -d

Portweiterleitung einrichten:
Stelle sicher, dass der WordPress-Container über den Port 80 auf die öffentliche IP-Adresse der EC2-Instanz erreichbar ist.

Testen:
Öffne einen Webbrowser und überprüfe, ob das WordPress-Blog über die öffentliche IP-Adresse der EC2-Instanz erreichbar ist.
Öffne einen Webbrowser und gib die öffentliche IP-Adresse der EC2-Instanz ein. Du solltest jetzt die WordPress-Installationsseite sehen
Folge den Anweisungen auf dem Bildschirm, um WordPress einzurichten.
Nachdem die Einrichtung abgeschlossen ist, kannst du dich anmelden und Beiträge verfassen, Themes ändern usw

Richte den WordPress-Blog ein und mache dich mit ihm vertraut. 


Herausforderungen

Nginx als Reverse-Proxy konfigurieren
Installiere Nginx auf deiner EC2-Instanz.
Konfiguriere Nginx als Reverse-Proxy, um Anfragen an den WordPress-Blog in deinem Docker-Container weiterzuleiten.
installiere Nginx

sudo apt update
sudo apt install nginx
Nginx konfigurieren
da Port 80 für WordPress verwendet wird, sollten wir diesen Port ändern, sodass Nginx den Port 80 nutzen kann
Öffne die docker-compose.yml
Ändere die Port-Zuweisung von WordPress von "80:80" zu "8080:80"
Speichere und schließe die Datei
Starte dann die Docker-Container neu

docker-compose down
docker-compose up -d
Erstelle nun eine Nginx-Konfigurationsdatei für WordPress

yes
Füge die folgenden Zeilen hinzu:

server {
    listen 80;

    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Speichere und schließe die Datei. Erstelle dann einen Symlink zum sites-enabled-Verzeichnis:

sudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
starte Nginx neu

sudo systemctl restart nginx



Schütze deine App!
Stelle sicher, dass die App nicht einfach aufgerufen werden kann. Konfiguriere NGINX so, 
sodass der Zugriff erst nach Eingabe von einem bestimmten Username und Passwort erfolgen kann (BasicAuth).
Das apache2-utils Paket enthält das htpasswd-Tool, mit dem du eine .htpasswd-Datei für BasicAuth erstellen kannst

sudo apt install apache2-utils

Du kannst einen Benutzernamen und ein Passwort mit dem htpasswd-Tool setzen

sudo htpasswd -c /etc/nginx/.htpasswd [DEIN_BENUTZERNAME]
Es wird nach einem Passwort gefragt. Gib dieses ein und bestätige es.
Konfiguriere Nginx für BasicAuth, Bearbeite die vorher erstellte wordpress-Konfigurationsdatei

sudo nano /etc/nginx/sites-available/wordpress
Füge in der location-Anweisung folgenden Code hinzu

auth_basic "Restricted Content";
auth_basic_user_file /etc/nginx/.htpasswd;
speichern, schließen und nginx neu starten

sudo systemctl restart nginx

Nun, wenn du auf deine WordPress-Website zugreifst, wirst du aufgefordert, den Benutzernamen und das Passwort einzugeben. 
Gib den von dir gesetzten Benutzernamen und das Passwort ein, um Zugriff zu erhalten.

Optional

Zusätzlich zur Bereitstellung von WordPress und MySQL in Docker auf AWS EC2 kannst du eine AWS-Architektur-Dokumentation erstellen, 
die den gesamten Ablauf und die Struktur deiner Bereitstellung zeigt. Die Architektur-Dokumentation soll alle relevanten AWS-Ressourcen, 
die Konfigurationseinstellungen, die Kommunikation zwischen den Diensten und andere wichtige Informationen enthalten. 
Diese Dokumentation sollte in einem lesbaren Format (z.B. als PDF oder als Bild) eingereicht werden.

TIPP: Du kannst dafür z. B. draw.io nutzen
